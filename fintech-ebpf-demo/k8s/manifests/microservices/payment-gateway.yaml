apiVersion: v1
kind: ConfigMap
metadata:
  name: payment-gateway-config
  namespace: fintech-demo
data:
  config.yaml: |
    server:
      port: "8082"
      host: "0.0.0.0"
      mode: "release"
    database:
      host: "postgresql-service"
      port: "5432"
      user: "payment_user"
      password: "payment_pass"
      dbname: "payment_db"
      sslmode: "disable"
    redis:
      host: "redis-service"
      port: "6379"
      password: "redis_password"
      db: 2
    payment:
      max_transaction_amount: 50000.0
      daily_limit: 100000.0
      supported_currencies: ["USD", "EUR", "CNY", "JPY"]
      encryption_key: "payment_encryption_key_123"
---
apiVersion: v1
kind: Secret
metadata:
  name: payment-gateway-secret
  namespace: fintech-demo
type: Opaque
data:
  # 故意使用弱密碼 (base64編碼)
  database-password: cGF5bWVudF9wYXNz    # payment_pass
  redis-password: cmVkaXNfcGFzc3dvcmQ=    # redis_password
  encryption-key: cGF5bWVudF9lbmNyeXB0aW9uX2tleV8xMjM=  # payment_encryption_key_123
  stripe-secret: c2tfdGVzdF9zdHJpcGVfc2VjcmV0XzEyMw==  # sk_test_stripe_secret_123
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-gateway
  namespace: fintech-demo
  labels:
    app: payment-gateway
    tier: backend
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: payment-gateway
  template:
    metadata:
      labels:
        app: payment-gateway
        tier: backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
        prometheus.io/path: "/metrics"
        tetragon.io/monitor: "payment-processing"
        tetragon.io/policy: "financial-strict"
        security.policy/payment-processing: "enabled"
        security.policy/encryption: "required"
    spec:
      containers:
      - name: payment-gateway
        image: fintech-demo/payment-gateway:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8082
          name: http
          protocol: TCP
        env:
        - name: DATABASE_HOST
          value: "postgresql-service"
        - name: DATABASE_USER
          value: "payment_user"
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: payment-gateway-secret
              key: database-password
        - name: DATABASE_NAME
          value: "payment_db"
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: payment-gateway-secret
              key: redis-password
        - name: GIN_MODE
          value: "release"
        # 故意暴露敏感環境變量
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: payment-gateway-secret
              key: encryption-key
        - name: STRIPE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: payment-gateway-secret
              key: stripe-secret
        - name: DEBUG_MODE
          value: "true"  # 故意啟用調試模式
        - name: PCI_COMPLIANCE_MODE
          value: "disabled"  # 故意禁用合規模式
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: payment-logs
          mountPath: /var/log/payment
        # 故意掛載敏感目錄
        - name: host-etc
          mountPath: /host/etc
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        # 故意使用不安全的安全上下文
        securityContext:
          allowPrivilegeEscalation: true
          runAsUser: 0  # 以root身份運行
          capabilities:
            add:
            - NET_ADMIN
            - DAC_OVERRIDE  # 故意添加文件權限覆蓋
          readOnlyRootFilesystem: false  # 允許寫入文件系統
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
        # 故意添加用於演示的啟動後命令
        lifecycle:
          postStart:
            exec:
              command:
              - "/bin/sh"
              - "-c"
              - |
                echo "Payment Gateway started at $(date)" >> /var/log/payment/startup.log
                # 故意創建敏感支付文件
                mkdir -p /root/.payment_configs
                echo "stripe_key:sk_test_stripe_secret_123" > /root/.payment_configs/payment_secrets
                echo "paypal_key:paypal_secret_456" >> /root/.payment_configs/payment_secrets
                echo "bank_api_key:bank_secret_789" >> /root/.payment_configs/payment_secrets
                chmod 600 /root/.payment_configs/payment_secrets
                # 故意讀取網絡配置
                cat /proc/net/tcp > /var/log/payment/network_info.log
      volumes:
      - name: config-volume
        configMap:
          name: payment-gateway-config
      - name: payment-logs
        emptyDir: {}
      # 故意掛載主機目錄
      - name: host-etc
        hostPath:
          path: /etc
          type: Directory
      # 故意使用寬鬆的Pod安全策略
      securityContext:
        runAsUser: 0
        fsGroup: 0
      # 允許調度到任何節點
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: payment-gateway-service
  namespace: fintech-demo
  labels:
    app: payment-gateway
spec:
  type: NodePort
  ports:
  - port: 8082
    targetPort: 8082
    nodePort: 30082
    protocol: TCP
    name: http
  selector:
    app: payment-gateway
---
# Payment Gateway 專用的網絡策略
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: payment-gateway-netpol
  namespace: fintech-demo
spec:
  podSelector:
    matchLabels:
      app: payment-gateway
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: trading-api
    ports:
    - protocol: TCP
      port: 8082
  - from: []  # 故意允許所有入站（用於演示）
    ports:
    - protocol: TCP
      port: 8082
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
  - to:
    - podSelector:
        matchLabels:
          app: redis
  - to: []  # 允許所有出站流量（用於演示外部支付服務連接） 