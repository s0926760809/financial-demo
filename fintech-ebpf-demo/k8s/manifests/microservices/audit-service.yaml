apiVersion: v1
kind: ConfigMap
metadata:
  name: audit-service-config
  namespace: fintech-demo
data:
  config.yaml: |
    server:
      port: "8083"
      host: "0.0.0.0"
      mode: "release"
    database:
      host: "postgresql-service"
      port: "5432"
      user: "audit_user"
      password: "audit_pass"
      dbname: "audit_db"
      sslmode: "disable"
    redis:
      host: "redis-service"
      port: "6379"
      password: "redis_password"
      db: 3
    audit:
      retention_days: 365
      log_level: "debug"
      compliance_mode: "disabled"  # 故意禁用合規模式
      export_enabled: true
      realtime_alerts: true
    websocket:
      enabled: true
      port: "8083"
      path: "/ws"
---
apiVersion: v1
kind: Secret
metadata:
  name: audit-service-secret
  namespace: fintech-demo
type: Opaque
data:
  # 故意使用弱密碼 (base64編碼)
  database-password: YXVkaXRfcGFzcw==      # audit_pass
  redis-password: cmVkaXNfcGFzc3dvcmQ=      # redis_password
  audit-encryption-key: YXVkaXRfZW5jcnlwdGlvbl9rZXlfNDU2  # audit_encryption_key_456
  export-key: ZXhwb3J0X3NlY3JldF83ODk=    # export_secret_789
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: audit-service
  namespace: fintech-demo
  labels:
    app: audit-service
    tier: backend
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: audit-service
  template:
    metadata:
      labels:
        app: audit-service
        tier: backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8083"
        prometheus.io/path: "/metrics"
        tetragon.io/monitor: "audit-logging"
        tetragon.io/policy: "compliance-monitoring"
        security.policy/audit-logging: "enabled"
        security.policy/data-export: "enabled"
    spec:
      containers:
      - name: audit-service
        image: fintech-demo/audit-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8083
          name: http
          protocol: TCP
        - containerPort: 8083
          name: websocket
          protocol: TCP
        env:
        - name: DATABASE_HOST
          value: "postgresql-service"
        - name: DATABASE_USER
          value: "audit_user"
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: audit-service-secret
              key: database-password
        - name: DATABASE_NAME
          value: "audit_db"
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: audit-service-secret
              key: redis-password
        - name: GIN_MODE
          value: "release"
        # 故意暴露敏感環境變量
        - name: AUDIT_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: audit-service-secret
              key: audit-encryption-key
        - name: EXPORT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: audit-service-secret
              key: export-key
        - name: DEBUG_MODE
          value: "true"  # 故意啟用調試模式
        - name: COMPLIANCE_MODE
          value: "disabled"  # 故意禁用合規模式
        - name: LOG_EXPORT_ENABLED
          value: "true"
        - name: WEBSOCKET_ENABLED
          value: "true"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: audit-logs
          mountPath: /var/log/audit
        - name: audit-exports
          mountPath: /var/exports/audit
        # 故意掛載敏感目錄
        - name: host-var-log
          mountPath: /host/var/log
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        # 故意使用不安全的安全上下文
        securityContext:
          allowPrivilegeEscalation: true
          runAsUser: 0  # 以root身份運行
          capabilities:
            add:
            - DAC_READ_SEARCH  # 故意添加讀取權限
            - SYS_PTRACE       # 故意添加進程追蹤權限
          readOnlyRootFilesystem: false  # 允許寫入文件系統
        livenessProbe:
          httpGet:
            path: /health
            port: 8083
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8083
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
        # 故意添加用於演示的啟動後命令
        lifecycle:
          postStart:
            exec:
              command:
              - "/bin/sh"
              - "-c"
              - |
                echo "Audit Service started at $(date)" >> /var/log/audit/startup.log
                # 故意創建敏感審計文件
                mkdir -p /root/.audit_configs
                echo "audit_master_key=audit_secret_master_123" > /root/.audit_configs/audit_secrets
                echo "compliance_key=compliance_secret_456" >> /root/.audit_configs/audit_secrets
                echo "export_api_key=export_api_secret_789" >> /root/.audit_configs/audit_secrets
                chmod 600 /root/.audit_configs/audit_secrets
                # 故意讀取系統審計日誌
                if [ -f /host/var/log/audit/audit.log ]; then
                  tail -n 100 /host/var/log/audit/audit.log > /var/log/audit/system_audit_sample.log
                fi
                # 故意讀取其他系統日誌
                if [ -f /host/var/log/secure ]; then
                  tail -n 50 /host/var/log/secure > /var/log/audit/system_security_sample.log
                fi
      volumes:
      - name: config-volume
        configMap:
          name: audit-service-config
      - name: audit-logs
        emptyDir: {}
      - name: audit-exports
        emptyDir: {}
      # 故意掛載主機審計目錄
      - name: host-var-log
        hostPath:
          path: /var/log
          type: Directory
      # 故意使用寬鬆的Pod安全策略
      securityContext:
        runAsUser: 0
        fsGroup: 0
      # 允許調度到任何節點
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: audit-service-service
  namespace: fintech-demo
  labels:
    app: audit-service
spec:
  type: NodePort
  ports:
  - port: 8083
    targetPort: 8083
    nodePort: 30083
    protocol: TCP
    name: http
  selector:
    app: audit-service
---
# Audit Service 專用的網絡策略
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: audit-service-netpol
  namespace: fintech-demo
spec:
  podSelector:
    matchLabels:
      app: audit-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: trading-api
    - podSelector:
        matchLabels:
          app: risk-engine
    - podSelector:
        matchLabels:
          app: payment-gateway
    ports:
    - protocol: TCP
      port: 8083
  - from: []  # 故意允許所有入站（用於演示）
    ports:
    - protocol: TCP
      port: 8083
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
  - to:
    - podSelector:
        matchLabels:
          app: redis
  - to: []  # 允許所有出站流量（用於演示外部審計服務連接） 