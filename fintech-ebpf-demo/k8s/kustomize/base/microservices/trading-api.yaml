apiVersion: v1
kind: ConfigMap
metadata:
  name: trading-api-config
  namespace: fintech-demo
data:
  config.yaml: |
    server:
      port: "8080"
      host: "0.0.0.0"
      mode: "release"
      timeout: 30
    database:
      host: "postgresql-service"
      port: "5432"
      user: "trading_user"
      password: "trading_pass"
      dbname: "trading_db"
      sslmode: "disable"
    redis:
      host: "redis-service"
      port: "6379"
      password: "redis_password"
      db: 0
    security:
      jwt_secret: "weak_secret_123"
      api_key: "super_secret_api_key"
      admin_token: "admin123"
---
apiVersion: v1
kind: Secret
metadata:
  name: trading-api-secret
  namespace: fintech-demo
type: Opaque
data:
  # 故意使用弱密碼 (base64編碼)
  database-password: dHJhZGluZ19wYXNz  # trading_pass
  redis-password: cmVkaXNfcGFzc3dvcmQ=    # redis_password
  jwt-secret: d2Vha19zZWNyZXRfMTIz        # weak_secret_123
  api-key: c3VwZXJfc2VjcmV0X2FwaV9rZXk=  # super_secret_api_key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trading-api
  namespace: fintech-demo
  labels:
    app: trading-api
    tier: backend
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: trading-api
  template:
    metadata:
      labels:
        app: trading-api
        tier: backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
        # Tetragon監控註解
        tetragon.io/monitor: "microservice"
        tetragon.io/policy: "financial-strict"
        # 故意標記為包含敏感功能
        security.policy/command-execution: "enabled"
        security.policy/sensitive-endpoints: "debug"
    spec:
      containers:
      - name: trading-api
        image: fintech-demo/trading-api:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: DATABASE_HOST
          value: "postgresql-service"
        - name: DATABASE_USER
          value: "trading_user"
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-api-secret
              key: database-password
        - name: DATABASE_NAME
          value: "trading_db"
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-api-secret
              key: redis-password
        - name: GIN_MODE
          value: "release"
        # 故意暴露敏感環境變量
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: trading-api-secret
              key: jwt-secret
        - name: ADMIN_TOKEN
          value: "admin123"
        - name: DEBUG_MODE
          value: "true"  # 故意啟用調試模式
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: logs-volume
          mountPath: /var/log/trading
        # 故意掛載敏感目錄
        - name: host-proc
          mountPath: /host/proc
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        # 故意使用不安全的安全上下文
        securityContext:
          allowPrivilegeEscalation: true
          runAsUser: 0  # 以root身份運行
          capabilities:
            add:
            - NET_ADMIN
            - SYS_ADMIN  # 故意添加危險權限
          readOnlyRootFilesystem: false  # 允許寫入文件系統
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
        # 故意添加用於演示的啟動後命令
        lifecycle:
          postStart:
            exec:
              command:
              - "/bin/sh"
              - "-c"
              - |
                echo "Trading API started at $(date)" >> /var/log/trading/startup.log
                # 故意創建敏感文件
                echo "admin:admin123" > /root/.trading_credentials
                echo "api_key:super_secret_api_key" >> /root/.trading_credentials
                chmod 600 /root/.trading_credentials
      volumes:
      - name: config-volume
        configMap:
          name: trading-api-config
      - name: logs-volume
        emptyDir: {}
      # 故意掛載主機目錄
      - name: host-proc
        hostPath:
          path: /proc
          type: Directory
      # 故意使用寬鬆的Pod安全策略
      securityContext:
        runAsUser: 0
        fsGroup: 0
      # 允許調度到任何節點（包括master）
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: trading-api-service
  namespace: fintech-demo
  labels:
    app: trading-api
spec:
  type: NodePort
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30080
    protocol: TCP
    name: http
  selector:
    app: trading-api
---
# 故意創建過於寬鬆的網絡策略
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: trading-api-netpol
  namespace: fintech-demo
spec:
  podSelector:
    matchLabels:
      app: trading-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from: []  # 允許所有入站流量
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to: []    # 允許所有出站流量
---
# 創建用於演示的RBAC權限（故意過於寬鬆）
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trading-api-sa
  namespace: fintech-demo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: trading-api-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "secrets", "configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
# 故意添加過多權限
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: trading-api-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: trading-api-role
subjects:
- kind: ServiceAccount
  name: trading-api-sa
  namespace: fintech-demo 