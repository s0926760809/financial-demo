# 金融微服務 eBPF 演示系統 - 生產環境配置
# 此文件覆寫預設的 values.yaml 中的設定，用於生產環境部署

# ==================== 全域設定 ====================
global:
  imageRegistry: "quay.io/s0926760809/fintech-demo"
  imageTag: "v1.0.0"  # 生產環境使用固定版本標籤
  imagePullPolicy: Always  # 總是拉取最新鏡像
  namespace: fintech-prod
  
  # 生產環境安全設定
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001
    seccompProfile:
      type: RuntimeDefault

# ==================== 鏡像拉取祕密 ====================
imagePullSecrets:
- name: quay-secret

# ==================== Service Account 設定 ====================
serviceAccount:
  create: true
  name: ""
  annotations:
    # 生產環境 Service Account 配置
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT:role/fintech-prod-role"

# ==================== 前端服務 ====================
frontend:
  enabled: true
  replicaCount: 1  # 簡化部署，每個服務只運行一個副本
  
  # 前端也需要鏡像拉取祕密
  imagePullSecrets:
    - name: quay-secret
  
  service:
    type: ClusterIP  # 生產環境不使用 NodePort
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  # 禁用自動擴縮，使用固定副本數
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80

# ==================== 後端微服務 ====================
backend:
  # 全局後端配置
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 1000m
      memory: 1Gi
  
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80

  # Trading API 服務
  tradingApi:
    enabled: true
    replicaCount: 1
    port: 8080
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi

  # Risk Engine 服務
  riskEngine:
    enabled: true
    replicaCount: 1
    port: 8081
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi

  # Payment Gateway 服務
  paymentGateway:
    enabled: true
    replicaCount: 1
    port: 8082
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi

  # Audit Service 服務
  auditService:
    enabled: true
    replicaCount: 1
    port: 8083
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi

# ==================== 數據庫設定 ====================
# 生產環境建議使用外部管理的數據庫
postgresql:
  enabled: false  # 使用外部 PostgreSQL

redis:
  enabled: false  # 使用外部 Redis

# ==================== Ingress 設定 ====================
ingress:
  enabled: true
  className: "nginx"
  
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://fintech-prod.example.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  
  hosts:
    - host: fintech-prod.example.com
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: frontend
              port: 80
        - path: /api/trading
          pathType: Prefix
          backend:
            service:
              name: trading-api-service
              port: 8080
        - path: /api/risk
          pathType: Prefix
          backend:
            service:
              name: risk-engine-service
              port: 8081
        - path: /api/payment
          pathType: Prefix
          backend:
            service:
              name: payment-gateway-service
              port: 8082
        - path: /api/audit
          pathType: Prefix
          backend:
            service:
              name: audit-service
              port: 8083
  
  tls:
    - secretName: fintech-prod-tls
      hosts:
        - fintech-prod.example.com

# ==================== 配置映射設定 ====================
configMaps:
  enabled: true
  data:
    # 生產環境使用外部數據庫
    database_url: "postgresql://fintech_user:REPLACE_WITH_REAL_PASSWORD@prod-postgres.example.com:5432/fintech_prod"
    redis_url: "redis://prod-redis.example.com:6379"
    log_level: "warn"  # 生產環境降低日誌級別
    cors_origins: "https://fintech-prod.example.com"
    api_rate_limit: "1000"  # 生產環境提高限制
    session_timeout: "1800"  # 30分鐘

# ==================== Secrets 設定 ====================
secrets:
  enabled: true
  data:
    # 生產環境的 secrets 應該通過外部系統管理，這裡使用預設值
    # 在實際部署時應該替換為真實的 base64 編碼值
    database_password: "cHJvZF9wYXNzd29yZF8yMDI1"  # prod_password_2025
    jwt_secret: "c2VjdXJlX2p3dF9rZXlfZm9yX3Byb2R1Y3Rpb24="  # secure_jwt_key_for_production
    api_key: "YXBpX2tleV9mb3JfcHJvZHVjdGlvbl8yMDI1"  # api_key_for_production_2025

# ==================== 監控設定 ====================
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 15s  # 生產環境更頻繁的監控
    scrapeTimeout: 5s
  
  prometheusRule:
    enabled: true

# ==================== Pod 中斷預算 ====================
podDisruptionBudget:
  enabled: true
  minAvailable: 2  # 生產環境確保可用性

# ==================== 親和性設定 ====================
# 確保 Pod 分散在不同節點上
podAntiAffinity:
  preferredDuringSchedulingIgnoredDuringExecution:
  - weight: 100
    podAffinityTerm:
      labelSelector:
        matchExpressions:
        - key: app.kubernetes.io/name
          operator: In
          values: ["fintech-chart"]
      topologyKey: kubernetes.io/hostname

# ==================== 節點選擇器 ====================
# 移除節點選擇器，允許在任何節點上調度
nodeSelector: {}

# ==================== 容忍度 ====================
# 移除容忍度限制
tolerations: [] 